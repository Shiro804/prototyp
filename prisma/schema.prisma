generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WorkerAvailability {
  Available
  Unavailable
}

enum WorkerStatus {
  Active
  Inactive
}

model WorkerRole {
  id          Int     @id @default(autoincrement())
  name        String  @unique // Role name like "Admin", "User", etc.
  description String? // Optional description of the role

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workers Worker[] // Users associated with this role
}

model Worker {
  id           Int                @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String             @unique
  passwordHash String
  status       WorkerStatus       @default(Active)
  availability WorkerAvailability @default(Available) // Tracks availability

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  events Event[]

  resourceAssignments ResourceAssignment[] // Dynamic assignments to workstations and machines
  processSteps        ProcessStep[] // Process steps assigned to the user
  roles               WorkerRole[] // Roles assigned to the user
  qualityChecks       QualityCheck[] // Quality checks performed by the user
}

enum EventType {
  ProcessStep
  Transport
  Exception
}

enum EventSeverity {
  Low
  Medium
  Critical
}

enum EventStatus {
  Pending
  InProgress
  Complete
}

model Event {
  id        Int            @id @default(autoincrement())
  type      EventType
  timestamp DateTime       @default(now())
  details   String? // Additional details or metadata for the event
  severity  EventSeverity? // For events like exceptions where severity is important
  status    EventStatus    @default(Pending) // Status to track the progression of the event

  // Relations
  worker           Worker
  processStep       ProcessStep?
  transportSystem   TransportSystem?
}

enum WorkstationType {
  Assembly
  Inspection
  Packaging
  Welding
  Painting
  QualityControl
  Machining
  MaterialHandling
  Maintenance
  Storage
}

enum WorkstationStatus {
  Active
  Inactive
}

model Workstation {
  id         Int               @id @default(autoincrement())
  name       String
  locationId Int
  status     WorkstationStatus @default(Active)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  type       WorkstationType   @default(Assembly)

  // Relations
  hall               Hall                 @relation(fields: [hallId], references: [id])
  resourceAssignment ResourceAssignment[] // Resource assignments for this workstation
  hallId             Int
}

enum MachineStatus {
  Operational
  Maintenance
  Offline
}

model Machine {
  id              Int           @id @default(autoincrement())
  userId          Int? // Foreign key in the User model
  locationId      Int
  name            String
  status          MachineStatus @default(Operational)
  lastMaintenance DateTime? // Track last maintenance date

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  hall                Hall                 @relation(fields: [hallId], references: [id])
  sensors             Sensor[] // Sensors associated with the machine
  processSteps        ProcessStep[] // Process steps involving this machine
  resourceAssignments ResourceAssignment[] // Resource assignments for this machine
  qualityChecks       QualityCheck[] // Quality checks performed by this machine
  hallId              Int
}

model Hall {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  location    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  workstations          Workstation[] // Workstations located in this hall
  machines              Machine[] // Machines located in this hall
  materialInventories   MaterialInventory[] // Materials stored in this hall
  startTransportSystems TransportSystem[]   @relation(name: "StartLocation")
  endTransportSystems   TransportSystem[]   @relation(name: "EndLocation")
}

enum TransportSystemStatus {
  Operational
  Maintenance
  Offline
  InTransit
  Idle
  Loading
  Unloading
}

model TransportSystem {
  id                  Int                   @id @default(autoincrement())
  transportMethod     String
  materialInventoryId Int?
  startLocationId     Int
  endLocationId       Int
  status              TransportSystemStatus @default(Operational)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  materialInventory MaterialInventory?
  startLocation     Hall               @relation("StartLocation", fields: [startLocationId], references: [id])
  endLocation       Hall               @relation("EndLocation", fields: [endLocationId], references: [id])

  trackingSystems TrackingSystem[] // Tracking systems associated with this transport system
  events          Event[]
}

model ProductionOrder {
  id                  Int    @id @default(autoincrement())
  orderNumber         String @unique
  materialInventoryId Int
  quantity            Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  materialInventory MaterialInventory @relation(fields: [materialInventoryId], references: [id])

  processStep ProcessStep[]
}

enum ResourceAssignmentStatus {
  Pending
  InProgress
  Complete
}

model ResourceAssignment {
  id            Int                      @id @default(autoincrement())
  processStepId Int
  userId        Int?
  machineId     Int? // Machine involved in the task
  status        ResourceAssignmentStatus @default(Pending)
  priority      Int                      @default(0) // Priority level (0 being normal priority)
  startAt       DateTime? // Scheduled start time
  endAt         DateTime? // Actual or planned end time
  dependencies  Json? // Dependencies, if any

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  processStep   ProcessStep  @relation(fields: [processStepId], references: [id])
  worker        Worker?      @relation(fields: [workerId], references: [id])
  machine       Machine?     @relation(fields: [machineId], references: [id])
  workstation   Workstation? @relation(fields: [workstationId], references: [id])
  workerId      Int?
  workstationId Int?
}

enum ProcessStepStatus {
  Pending
  InProgress
  Complete
}

model ProcessStep {
  id        Int               @id @default(autoincrement())
  name      String
  orderId   Int
  machineId Int
  status    ProcessStepStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  productionOrder ProductionOrder @relation(fields: [productionOrderId], references: [id])
  machine         Machine         @relation(fields: [machineId], references: [id])

  // Users assigned to this step, based on availability
  assignedWorkers     Worker[] // Users assigned to this process step
  events              Event[] // Events related to this process step
  resourceAssignments ResourceAssignment[] // Resource assignments for this process step
  productionOrderId   Int
}

enum QualityCheckResult {
  Pass
  Fail
}

model QualityCheck {
  id                  Int                @id @default(autoincrement())
  materialInventoryId Int
  result              QualityCheckResult
  checkTime           DateTime           @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  materialInventory MaterialInventory @relation(fields: [materialInventoryId], references: [id])
  worker            Worker?           @relation(fields: [workerId], references: [id])
  machine           Machine?          @relation(fields: [machineId], references: [id])
  workerId          Int?
  machineId         Int?
}

enum MetricType {
  Throughput
  CycleTime
  UtilizationRate
  Downtime
  Efficiency
  ErrorRate
  EnergyConsumption
  TaskCompletionTime
  OEE
  LeadTime
  ResourceAllocationEfficiency
  TaskQueueLength
  WorkerEfficiency
  QualityYield
  MaintenanceFrequency
  WIP
}

model Metric {
  id           Int        @id @default(autoincrement())
  type         MetricType
  metricTypeId Int
  entityId     Int // refers to the entity (machine, user, process step, etc.) the metric is associated with
  value        Float
  targetValue  Float? // Optional field to track target values for metrics
  description  String?

  createdAt DateTime @default(now())
}

enum TrackingType {
  Barcode
  RFID
  GPS
}

model TrackingSystem {
  id                  Int          @id @default(autoincrement())
  trackingType        TrackingType
  materialInventoryId Int
  timestamp           DateTime     @default(now())
  transportSystemId   Int? // Optional association with transport system

  // Relations
  materialInventory MaterialInventory @relation(fields: [materialInventoryId], references: [id])
  transportSystem   TransportSystem?  @relation(fields: [transportSystemId], references: [id])
}

model MaterialInventory {
  id           Int     @id @default(autoincrement())
  materialType String // Type of material (e.g., wood, metal, etc.)
  quantity     Int // Total quantity of material in stock
  locationId   Int     @unique
  batchNumber  String? // Optional, can be used to track batch numbers if needed

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  // hall            Hall
  transportSystem TransportSystem?

  qualityChecks     QualityCheck[] // Quality checks associated with the material
  trackingSystems   TrackingSystem[] // Multiple tracking systems for material tracking
  productionOrders  ProductionOrder[] // Materials linked to production orders
}

enum SensorType {
  Temperature
  Pressure
  FinishedProductCounter
}

model Sensor {
  id           Int        @id @default(autoincrement())
  type         SensorType
  machineId    Int
  value        Float
  timestamp    DateTime   @default(now())
  minThreshold Float? // Minimum allowed value
  maxThreshold Float? // Maximum allowed value

  // Relations
  machine Machine @relation(fields: [machineId], references: [id])
}

model SimulationLog {
  id        Int     @id @default(autoincrement())
  eventType String
  details   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SimulationSetting {
  id           Int    @id @default(autoincrement())
  settingName  String
  settingValue String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
